{
  "hash": "fb5a973188d2420d1d05d9ba7bd10680",
  "result": {
    "markdown": "# Introduction {.unnumbered}\n\n> *This is a book created from markdown and executable code. See @knuth84 for additional discussion of literate programming.*\n\nI've left the boilerplate text above in this text because it's fitting for a book on data technology. [Donald Knuth](https://en.wikipedia.org/wiki/Donald_Knuth?oldformat=true) and his contributions to [literate programming](https://en.wikipedia.org/wiki/Literate_programming?oldformat=true) eventually lead to the document you're reading. In literate programming, explanations and logic (written in natural language) are interspersed with snippets or 'chunks' of code, which can be compiled into various output formats, or used as a virtual notebook environment. \n\nIt's hard to overstate the importance of this technology. Before literate programming, the world of code was largely separated from most other forms of written language. The combination of code with natural language...\n\n\nLiterate programming has done for code what... \n\n## Open source\n\nI've included the steps for publishing this book *inside* the book because it's serves as an excellent example of the topics contained in this text. This book is [written in Quarto](https://quarto.org/docs/books/), which is an '*open-source scientific and technical publishing system.*' All of the tools in this text are [open-source](https://en.wikipedia.org/wiki/Open_source), which means the source code (i.e. files) to create it are '*made freely available for possible modification and redistribution*.'\n\nIf we look at the code files used to create this book in the folder tree below we notice multiple file types (extensions) and names:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n_book\n├── Data-Technologies.pdf\n├── code.html\n├── command-line.html\n├── files.html\n├── fun-arguments.html\n├── fun-environments.html\n├── fun-names.html\n├── fun-structure.html\n├── index.html\n├── intro.html\n├── notebooks.html\n├── oop-basics.html\n├── oop-in-python.html\n├── oop-in-r.html\n├── preface.html\n├── regex.html\n├── search.json\n└── site_libs\n    ├── bootstrap\n    │   ├── bootstrap-icons.css\n    │   ├── bootstrap-icons.woff\n    │   ├── bootstrap.min.css\n    │   └── bootstrap.min.js\n    ├── clipboard\n    │   └── clipboard.min.js\n    ├── quarto-html\n    │   ├── anchor.min.js\n    │   ├── popper.min.js\n    │   ├── quarto-syntax-highlighting.css\n    │   ├── quarto.js\n    │   ├── tippy.css\n    │   └── tippy.umd.min.js\n    ├── quarto-nav\n    │   ├── headroom.min.js\n    │   └── quarto-nav.js\n    └── quarto-search\n        ├── autocomplete.umd.js\n        ├── fuse.min.js\n        └── quarto-search.js\n```\n:::\n:::\n\n\nEach of these \n\nThese files are stored in a [GitHub repository](https://github.com/mjfrigaard/data-tech). GitHub is a platform for hosting open source projects that use [Git](https://git-scm.com/), the world's most popular distributed version control system.\n\n## Collaboration\n\nBasic knowledge of Git has become somewhat necessary when you decide to enter the data technology ecosystem (or other open-source projects). I won't be diving into the Git workflow here, but I *will* cover the commands I used to store and publish this book. \n\nThe following commands are entered at the command line (Terminal if you're using macOS).\n\n1. I created a repository on [GitHub.com](https://github.com) like this one: [mjfrigaard/data-tech](https://github.com/mjfrigaard/data-tech) \n\n2. Add (`-A`) and commit (`commit -m`) the files in the book folder: \n\n\n\n````default\n$ git add -A\n$ git commit -m \"first commit\"\n````\n\n\n3. `push` local files to GitHub repo\n\n\n\n````default\n$ git remote add origin git@github.com:mjfrigaard/data-tech.git\n$ git branch -M main\n$ git push -u origin main\n````\n\n\n4. Create (checkout) an empty `gh-pages` branch\n\n\n\n````default\n$ git checkout --orphan gh-pages\nSwitched to a new branch 'gh-pages'\n$ git reset --hard \n$ git commit --allow-empty -m \"Initialising gh-pages branch\"\nInitialising gh-pages branch\n````\n\n\n5. `push` the book files to the `gh-pages` branch\n\n\n\n````default\n$ git push origin gh-pages\nEnumerating objects: 2, done.\nCounting objects: 100% (2/2), done.\nWriting objects: 100% (2/2), 176 bytes | 176.00 KiB/s, done.\nTotal 2 (delta 0), reused 0 (delta 0), pack-reused 0\nremote: \nremote: Create a pull request for 'gh-pages' on GitHub by visiting:\nremote:      https://github.com/mjfrigaard/data-tech/pull/new/gh-pages\nremote: \nTo github.com:mjfrigaard/data-tech.git\n * [new branch]      gh-pages -> gh-pages\n````\n\n\n5. Switch (`checkout`) back to `main` branch\n\n\n\n````default\n$ git checkout main\nSwitched to branch 'main'\nYour branch is up to date with 'origin/main'.\n````\n\n\n6. `publish` to `gh-pages` branch\n\n\n\n````default\n$ quarto publish gh-pages\n? Update site at https://mjfrigaard.github.io/data-tech/? (Y/n) \n````\n\n\n````default\n? Update site at https://mjfrigaard.github.io/data-tech/? (Y/n) Yes\n````\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}